<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1418110468396">{:repl-history {:ide [], :local [&quot;(.exists (io/file \&quot;234\&quot;))&quot; &quot;(.exists (io/file \&quot;files/irises.txt\&quot;))&quot; &quot;(-main \&quot;euclidean\&quot; \&quot;files/irise.txt\&quot;)&quot; &quot;(-&gt;&gt; (io/reader \&quot;files/irises.txt\&quot;)\n     (line-seq)\n     (reduce #(do (\n                    (println %1)\n                    (println %2)\n                    (println %3)\n                    ))\n             []))&quot; &quot;(-&gt;&gt; (io/reader \&quot;files/irises.txt\&quot;)\n     (line-seq)\n     (reduce #(do (\n                    (println %1)\n                    (println %2)\n                    ))\n             []))&quot; &quot;(-&gt;&gt; (io/reader \&quot;files/irises.txt\&quot;)\n     (line-seq)\n     ;(reduce #(do (\n     ;               (println %1)\n     ;               (println %2)\n     ;               ))\n     ;        [])\n )&quot; &quot;(\&quot;5.1,3.5,1.4,0.2,Iris-setosa\&quot; \&quot;4.9,3.0,1.4,0.2,Iris-setosa\&quot;)&quot; &quot;(\&quot;5.1,3.5,1.4,0.2,Iris-setosa\&quot;,\n  \&quot;4.9,3.0,1.4,0.2,Iris-setosa\&quot;)&quot; &quot;(println \&quot;3242\&quot;)&quot; &quot;(-&gt;&gt; (\&quot;5.1,3.5,1.4,0.2,Iris-setosa\&quot;,\&quot;4.9,3.0,1.4,0.2,Iris-setosa\&quot;)\n     (reduce #(println)))&quot; &quot;(-&gt;&gt; \&quot;sdf\&quot;\n     (println))&quot; &quot;(-&gt;&gt; (\&quot;d\&quot;,\&quot;a\&quot;)\n     (println))&quot; &quot;(-&gt;&gt; (\&quot;d\&quot;,\&quot;a\&quot;)\n     (reduce (println)))&quot; &quot;(reduce (println) () )&quot; &quot;(-&gt;&gt; '(\&quot;d\&quot;,\&quot;a\&quot;)\n     (reduce (println)))&quot; &quot;(\&quot;a\&quot;, \&quot;b\&quot;)&quot; &quot;`(\&quot;a\&quot;, \&quot;b\&quot;)&quot; &quot;(-&gt;&gt; `(\&quot;d\&quot;,\&quot;a\&quot;)\n     (reduce (println)))&quot; &quot;(-&gt;&gt; `(\&quot;d\&quot;,\&quot;a\&quot;)\n     (reduce #(println %1)))&quot; &quot;(-&gt;&gt; `(\&quot;d\&quot;,\&quot;a\&quot;)\n     (reduce #(println %1) []))&quot; &quot;(reduce #(println %1) [] `(\&quot;sdf\&quot; \&quot;aaa\&quot;))&quot; &quot;(reduce #(println %1) `(\&quot;sdf\&quot; \&quot;aaa\&quot;))&quot; &quot;(reduce #(println %1 %2) `(\&quot;sdf\&quot; \&quot;aaa\&quot;))&quot; &quot;(println \&quot;sdf\&quot;)&quot; &quot;(reduce (fn [memo str] \n          (println str))\n        `(\&quot;sdf\&quot; \&quot;aaa\&quot;))&quot; &quot;(reduce (fn [memo str] \n          (println str))\n        [] `(\&quot;sdf\&quot; \&quot;aaa\&quot;))&quot; &quot;(reduce (fn [memo str] \n          (do\n            (println str)\n            (conj memo str)))\n        [] `(\&quot;sdf\&quot; \&quot;aaa\&quot;))&quot; &quot;(reduce (fn [memo str] \n          (do\n            (println str)\n            (cons memo str)))\n        [] `(\&quot;sdf\&quot; \&quot;aaa\&quot;))&quot; &quot;(reduce (fn [memo str] \n          (do\n            (println str)\n            (cons str memo)))\n        [] `(\&quot;sdf\&quot; \&quot;aaa\&quot;))&quot; &quot;(reduce (fn [memo str] \n          (do\n            (conj str memo)))\n        [] `(\&quot;sdf\&quot; \&quot;aaa\&quot;))&quot; &quot;(reduce (fn [memo str]\n          (conj str memo))\n        [] `(\&quot;sdf\&quot; \&quot;aaa\&quot;))&quot; &quot;(reduce (fn [memo str]\n          (conj memo str))\n        [] `(\&quot;sdf\&quot; \&quot;aaa\&quot;))&quot; &quot;(let [i 0]\n  (-&gt;&gt; (reduce (fn [memo str]\n                 (conj memo str))\n               [] `(\&quot;sdf\&quot; \&quot;aaa\&quot;))\n       (hash-map :index (inc i) :value )))&quot; &quot;(let [i 0]\n  (reduce (fn [memo str]\n            (conj memo\n                  (hash-map :index (inc i) :value str)))\n          [] `(\&quot;sdf\&quot; \&quot;aaa\&quot;)))&quot; &quot;(let [i 0]\n  (reduce (fn [memo str]\n            (conj memo\n                  (hash-map :index (inc i) :value str)))\n          [] `(\&quot;sdf\&quot; \&quot;aaa\&quot; \&quot;ccc\&quot; \&quot;sdf\&quot; \&quot;ga\&quot;)))&quot; &quot;(let [i (atom(0))]\n  (reduce (fn [memo str]\n            (conj memo\n                  (hash-map :index i :value str)))\n          [] `(\&quot;sdf\&quot; \&quot;aaa\&quot; \&quot;ccc\&quot; \&quot;sdf\&quot; \&quot;ga\&quot;)))&quot; &quot;(let [i (atom(0))]\n  (reduce (fn [memo str]\n            (conj memo\n                  (hash-map :index @i :value str)))\n          [] `(\&quot;sdf\&quot; \&quot;aaa\&quot; \&quot;ccc\&quot; \&quot;sdf\&quot; \&quot;ga\&quot;)))&quot; &quot;(let [i (atom 0)]\n  (reduce (fn [memo str]\n            (conj memo\n                  (hash-map :index @i :value str)))\n          [] `(\&quot;sdf\&quot; \&quot;aaa\&quot; \&quot;ccc\&quot; \&quot;sdf\&quot; \&quot;ga\&quot;)))&quot; &quot;(let [i (atom 0)]\n  (reduce (fn [memo str]\n            (do\n              (swap! i inc)\n              (conj memo\n                    (hash-map :index @i :value str))))\n          [] `(\&quot;sdf\&quot; \&quot;aaa\&quot; \&quot;ccc\&quot; \&quot;sdf\&quot; \&quot;ga\&quot;)))&quot; &quot;(-&gt;&gt; (io/reader \&quot;files/irises.txt\&quot;)\n     (line-seq))&quot; &quot;(let [i (atom 0)]\n  (-&gt;&gt; (io/reader \&quot;files/irises.txt\&quot;)\n       (line-seq)\n       (reduce (fn [memo str]\n                 (do \n                   (swap! i inc)\n                   (conj memo\n                         (hash-map :index @i :value str))))\n               [])))&quot; &quot;(:value [{:index 1, :value [5.1 3.5 1.4 0.2]} {:index 2, :value [4.9 3.0 1.4 0.2]} {:index 3, :value [4.7 3.2 1.3 0.2]} {:index 4, :value [4.6 3.1 1.5 0.2]} {:index 5, :value [5.0 3.6 1.4 0.2]} {:index 6, :value [5.4 3.9 1.7 0.4]} {:index 7, :value [4.6 3.4 1.4 0.3]} {:index 8, :value [5.0 3.4 1.5 0.2]} {:index 9, :value [4.4 2.9 1.4 0.2]} {:index 10, :value [4.9 3.1 1.5 0.1]} {:index 11, :value [5.4 3.7 1.5 0.2]} {:index 12, :value [4.8 3.4 1.6 0.2]} {:index 13, :value [4.8 3.0 1.4 0.1]} {:index 14, :value [4.3 3.0 1.1 0.1]} {:index 15, :value [5.8 4.0 1.2 0.2]} {:index 16, :value [5.7 4.4 1.5 0.4]} {:index 17, :value [5.4 3.9 1.3 0.4]} {:index 18, :value [5.1 3.5 1.4 0.3]} {:index 19, :value [5.7 3.8 1.7 0.3]} {:index 20, :value [5.1 3.8 1.5 0.3]} {:index 21, :value [5.4 3.4 1.7 0.2]} {:index 22, :value [5.1 3.7 1.5 0.4]} {:index 23, :value [4.6 3.6 1.0 0.2]} {:index 24, :value [5.1 3.3 1.7 0.5]} {:index 25, :value [4.8 3.4 1.9 0.2]} {:index 26, :value [5.0 3.0 1.6 0.2]} {:index 27, :value [5.0 3.4 1.6 0.4]} {:index 28, :value [5.2 3.5 1.5 0.2]} {:index 29, :value [5.2 3.4 1.4 0.2]} {:index 30, :value [4.7 3.2 1.6 0.2]} {:index 31, :value [4.8 3.1 1.6 0.2]} {:index 32, :value [5.4 3.4 1.5 0.4]} {:index 33, :value [5.2 4.1 1.5 0.1]} {:index 34, :value [5.5 4.2 1.4 0.2]} {:index 35, :value [4.9 3.1 1.5 0.2]} {:index 36, :value [5.0 3.2 1.2 0.2]} {:index 37, :value [5.5 3.5 1.3 0.2]} {:index 38, :value [4.9 3.6 1.4 0.1]} {:index 39, :value [4.4 3.0 1.3 0.2]} {:index 40, :value [5.1 3.4 1.5 0.2]} {:index 41, :value [5.0 3.5 1.3 0.3]} {:index 42, :value [4.5 2.3 1.3 0.3]} {:index 43, :value [4.4 3.2 1.3 0.2]} {:index 44, :value [5.0 3.5 1.6 0.6]} {:index 45, :value [5.1 3.8 1.9 0.4]} {:index 46, :value [4.8 3.0 1.4 0.3]} {:index 47, :value [5.1 3.8 1.6 0.2]} {:index 48, :value [4.6 3.2 1.4 0.2]} {:index 49, :value [5.3 3.7 1.5 0.2]} {:index 50, :value [5.0 3.3 1.4 0.2]} {:index 51, :value [7.0 3.2 4.7 1.4]} {:index 52, :value [6.4 3.2 4.5 1.5]} {:index 53, :value [6.9 3.1 4.9 1.5]} {:index 54, :value [5.5 2.3 4.0 1.3]} {:index 55, :value [6.5 2.8 4.6 1.5]} {:index 56, :value [5.7 2.8 4.5 1.3]} {:index 57, :value [6.3 3.3 4.7 1.6]} {:index 58, :value [4.9 2.4 3.3 1.0]} {:index 59, :value [6.6 2.9 4.6 1.3]} {:index 60, :value [5.2 2.7 3.9 1.4]} {:index 61, :value [5.0 2.0 3.5 1.0]} {:index 62, :value [5.9 3.0 4.2 1.5]} {:index 63, :value [6.0 2.2 4.0 1.0]} {:index 64, :value [6.1 2.9 4.7 1.4]} {:index 65, :value [5.6 2.9 3.6 1.3]} {:index 66, :value [6.7 3.1 4.4 1.4]} {:index 67, :value [5.6 3.0 4.5 1.5]} {:index 68, :value [5.8 2.7 4.1 1.0]} {:index 69, :value [6.2 2.2 4.5 1.5]} {:index 70, :value [5.6 2.5 3.9 1.1]} {:index 71, :value [5.9 3.2 4.8 1.8]} {:index 72, :value [6.1 2.8 4.0 1.3]} {:index 73, :value [6.3 2.5 4.9 1.5]} {:index 74, :value [6.1 2.8 4.7 1.2]} {:index 75, :value [6.4 2.9 4.3 1.3]} {:index 76, :value [6.6 3.0 4.4 1.4]} {:index 77, :value [6.8 2.8 4.8 1.4]} {:index 78, :value [6.7 3.0 5.0 1.7]} {:index 79, :value [6.0 2.9 4.5 1.5]} {:index 80, :value [5.7 2.6 3.5 1.0]} {:index 81, :value [5.5 2.4 3.8 1.1]} {:index 82, :value [5.5 2.4 3.7 1.0]} {:index 83, :value [5.8 2.7 3.9 1.2]} {:index 84, :value [6.0 2.7 5.1 1.6]} {:index 85, :value [5.4 3.0 4.5 1.5]} {:index 86, :value [6.0 3.4 4.5 1.6]} {:index 87, :value [6.7 3.1 4.7 1.5]} {:index 88, :value [6.3 2.3 4.4 1.3]} {:index 89, :value [5.6 3.0 4.1 1.3]} {:index 90, :value [5.5 2.5 4.0 1.3]} {:index 91, :value [5.5 2.6 4.4 1.2]} {:index 92, :value [6.1 3.0 4.6 1.4]} {:index 93, :value [5.8 2.6 4.0 1.2]} {:index 94, :value [5.0 2.3 3.3 1.0]} {:index 95, :value [5.6 2.7 4.2 1.3]} {:index 96, :value [5.7 3.0 4.2 1.2]} {:index 97, :value [5.7 2.9 4.2 1.3]} {:index 98, :value [6.2 2.9 4.3 1.3]} {:index 99, :value [5.1 2.5 3.0 1.1]} {:index 100, :value [5.7 2.8 4.1 1.3]} {:index 101, :value [6.3 3.3 6.0 2.5]} {:index 102, :value [5.8 2.7 5.1 1.9]} {:index 103, :value [7.1 3.0 5.9 2.1]} {:index 104, :value [6.3 2.9 5.6 1.8]} {:index 105, :value [6.5 3.0 5.8 2.2]} {:index 106, :value [7.6 3.0 6.6 2.1]} {:index 107, :value [4.9 2.5 4.5 1.7]} {:index 108, :value [7.3 2.9 6.3 1.8]} {:index 109, :value [6.7 2.5 5.8 1.8]} {:index 110, :value [7.2 3.6 6.1 2.5]} {:index 111, :value [6.5 3.2 5.1 2.0]} {:index 112, :value [6.4 2.7 5.3 1.9]} {:index 113, :value [6.8 3.0 5.5 2.1]} {:index 114, :value [5.7 2.5 5.0 2.0]} {:index 115, :value [5.8 2.8 5.1 2.4]} {:index 116, :value [6.4 3.2 5.3 2.3]} {:index 117, :value [6.5 3.0 5.5 1.8]} {:index 118, :value [7.7 3.8 6.7 2.2]} {:index 119, :value [7.7 2.6 6.9 2.3]} {:index 120, :value [6.0 2.2 5.0 1.5]} {:index 121, :value [6.9 3.2 5.7 2.3]} {:index 122, :value [5.6 2.8 4.9 2.0]} {:index 123, :value [7.7 2.8 6.7 2.0]} {:index 124, :value [6.3 2.7 4.9 1.8]} {:index 125, :value [6.7 3.3 5.7 2.1]} {:index 126, :value [7.2 3.2 6.0 1.8]} {:index 127, :value [6.2 2.8 4.8 1.8]} {:index 128, :value [6.1 3.0 4.9 1.8]} {:index 129, :value [6.4 2.8 5.6 2.1]} {:index 130, :value [7.2 3.0 5.8 1.6]} {:index 131, :value [7.4 2.8 6.1 1.9]} {:index 132, :value [7.9 3.8 6.4 2.0]} {:index 133, :value [6.4 2.8 5.6 2.2]} {:index 134, :value [6.3 2.8 5.1 1.5]} {:index 135, :value [6.1 2.6 5.6 1.4]} {:index 136, :value [7.7 3.0 6.1 2.3]} {:index 137, :value [6.3 3.4 5.6 2.4]} {:index 138, :value [6.4 3.1 5.5 1.8]} {:index 139, :value [6.0 3.0 4.8 1.8]} {:index 140, :value [6.9 3.1 5.4 2.1]} {:index 141, :value [6.7 3.1 5.6 2.4]} {:index 142, :value [6.9 3.1 5.1 2.3]} {:index 143, :value [5.8 2.7 5.1 1.9]} {:index 144, :value [6.8 3.2 5.9 2.3]} {:index 145, :value [6.7 3.3 5.7 2.5]} {:index 146, :value [6.7 3.0 5.2 2.3]} {:index 147, :value [6.3 2.5 5.0 1.9]} {:index 148, :value [6.5 3.0 5.2 2.0]} {:index 149, :value [6.2 3.4 5.4 2.3]} {:index 150, :value [5.9 3.0 5.1 1.8]} {:index 151, :value []}])&quot; &quot;(get-points \&quot;files/irises.txt\&quot;)&quot; &quot;(:value (get-points \&quot;files/irises.txt\&quot;))&quot; &quot;(get (get-points \&quot;files/irises.txt\&quot;) :value)&quot; &quot;(get (first (get-points \&quot;files/irises.txt\&quot;)) :value)&quot; &quot;(sqr 2)&quot; &quot;(sqr 3)&quot; &quot;(Math/sqrt 9)&quot; &quot;(Math/sqr 9)&quot; &quot;(Math.pow 9 2)&quot; &quot;(Math/pow 9 2)&quot; &quot;(reduce (fn [memo val]\n          (memo - val)) 0 [[3.1 3.4 4.5] [0.5 0.6 0.7]])&quot; &quot;(reduce (fn [memo val]\n          (memo - val)) 0.0 [[3.1 3.4 4.5] [0.5 0.6 0.7]])&quot; &quot;(reduce (fn [memo val]\n          (- memo val)) 0.0 [[3.1 3.4 4.5] [0.5 0.6 0.7]])&quot; &quot;(reduce (fn [memo val]\n          (- memo (get val 1))) 0.0 [[3.1 3.4 4.5] [0.5 0.6 0.7]])&quot; &quot;(reduce (fn [memo val]\n          (- memo (get val 0))) 0.0 [[3.1 3.4 4.5] [0.5 0.6 0.7]])&quot; &quot;(let [i (atom -1)\n      p1 [3.1 3.4 4.5]\n      p2 [0.5 0.6 0.7]]\n  (reduce (fn [memo val]\n            (do \n              (swap! i inc)\n              (conj memo (- val (get p2 i)))))\n          [] p1))&quot; &quot;(let [i (atom -1)\n      p1 [3.1 3.4 4.5]\n      p2 [0.5 0.6 0.7]]\n  (reduce (fn [memo val]\n            (do \n              (swap! i inc)\n              (conj memo (- val (get p2 @i)))))\n          [] p1))&quot; &quot;(let [i (atom -1)\n      p1 [1 3.4 4.5]\n      p2 [1 0.4 0.5]]\n  (reduce (fn [memo val]\n            (do \n              (swap! i inc)\n              (conj memo (- val (get p2 @i)))))\n          [] p1))&quot; &quot;(let [i (atom -1)\n      p1 [1 3.4 4.5]\n      p2 [1 0.4 0.5]]\n  (reduce (fn [memo val]\n            (do \n              (swap! i inc)\n              (+ memo (sqr (- val (get p2 @i))))))\n          0 p1))&quot; &quot;(let [i (atom -1)\n      p1 [1 2 2]\n      p2 [1 1 1]]\n  (reduce (fn [memo val]\n            (do \n              (swap! i inc)\n              (+ memo (sqr (- val (get p2 @i))))))\n          0 p1))&quot; &quot;(let [i (atom -1)\n      p1 [1 2 2]\n      p2 [1 1 1]]\n  (-&gt;&gt;\n    (reduce (fn [memo val]\n              (do\n                (swap! i inc)\n                (+ memo (sqr (- val (get p2 @i))))))\n            0 p1))\n  (Math/sqrt))&quot; &quot;(let [i (atom -1)\n      p1 [1 2 2]\n      p2 [1 1 1]]\n  (-&gt;&gt;\n    (reduce (fn [memo val]\n              (do\n                (swap! i inc)\n                (+ memo (sqr (- val (get p2 @i))))))\n            0 p1))\n  (Math.sqrt))&quot; &quot;(Math/sqrt 0.5)&quot; &quot;(let [i (atom -1)\n      p1 [1 2 2]\n      p2 [1 1 1]]\n  (-&gt;&gt;\n    (reduce (fn [memo val]\n              (do\n                (swap! i inc)\n                (+ memo (sqr (- val (get p2 @i))))))\n            0 p1)\n    (Math.sqrt)))&quot; &quot;(let [i (atom -1)\n      p1 [1 2 2.2]\n      p2 [1 1 1]]\n  (-&gt;&gt;\n    (reduce (fn [memo val]\n              (do\n                (swap! i inc)\n                (+ memo (sqr (- val (get p2 @i))))))\n            0 p1)\n    (Math.sqrt)))&quot; &quot;(let [i (atom -1)\n      p1 [1 2 2.2]\n      p2 [1 1 1]]\n  (-&gt;&gt;\n    (reduce (fn [memo val]\n              (do\n                (swap! i inc)\n                (+ memo (sqr (- val (get p2 @i))))))\n            0 p1)\n    (Math/sqrt)))&quot; &quot;(let [i (atom -1)\n      p1 [1 2 2]\n      p2 [1 1 1]]\n  (-&gt;&gt;\n    (reduce (fn [memo val]\n              (do\n                (swap! i inc)\n                (+ memo (sqr (- val (get p2 @i))))))\n            0 p1)\n    (Math/sqrt)))&quot; &quot;(let [i (atom -1)\n      p1 [1 2 2 2 2]\n      p2 [1 1 1 1 1]]\n  (-&gt;&gt;\n    (reduce (fn [memo val]\n              (do\n                (swap! i inc)\n                (+ memo (sqr (- val (get p2 @i))))))\n            0 p1)\n    (Math/sqrt)))&quot; &quot;(let [i (atom -1)]\n  (reduce (fn [memo val]\n            (do\n              (swap! i inc)\n              (if (not= val (get [1 2 3] @i))\n                (inc memo)\n                memo)))\n          0 [1 2 3]))&quot; &quot;(let [i (atom -1)]\n  (reduce (fn [memo val]\n            (do\n              (swap! i inc)\n              (if (not= val (get [3 2 3] @i))\n                (inc memo)\n                memo)))\n          0 [1 2 3]))&quot; &quot;(let [i (atom -1)]\n  (reduce (fn [memo val]\n            (do\n              (swap! i inc)\n              (if (not= val (get [3 3 3] @i))\n                (inc memo)\n                memo)))\n          0 [1 2 3]))&quot; &quot;(let [i (atom -1)]\n  (reduce (fn [memo val]\n            (do\n              (swap! i inc)\n              (if (not= val (get [3 3 1] @i))\n                (inc memo)\n                memo)))\n          0 [1 2 3]))&quot; &quot;(let [i (atom -1)]\n  (reduce (fn [memo val]\n            (do\n              (swap! i inc)\n              (if (not= val (get [3 2 1] @i))\n                (inc memo)\n                memo)))\n          0 [1 2 3]))&quot; &quot;(let [i (atom -1)]\n  (-&gt;&gt;\n    (reduce (fn [memo val]\n              (do\n                (swap! i inc)\n                (+ memo (sqr (- val (@i [3.2 4.3]))))))\n            0 [3.3 4.4])\n    (Math/sqrt)))&quot; &quot;(let [i (atom -1)]\n  (-&gt;&gt;\n    (reduce (fn [memo val]\n              (do\n                (swap! i inc)\n                (+ memo (sqr (- val (get [3.2 4.3] @i))))))\n            0 [3.3 4.4])\n    (Math/sqrt)))&quot; &quot;(get-get-distancetion \&quot;euclidean\&quot;)&quot; &quot;(get-distance-function \&quot;euclidean\&quot;)&quot; &quot;betta&quot; &quot;alpha&quot; &quot;r-b&quot; &quot;r-a&quot; &quot;/ 4 9&quot; &quot;(/ 4.0 9) &quot; &quot;(/ 4 9) &quot; &quot;(-main \&quot;hamming\&quot; \&quot;files/irises.txt\&quot;)&quot; &quot;\n(-main \&quot;hamming\&quot; \&quot;files/irises.txt\&quot;)&quot; &quot;(check-arguments)&quot; &quot;lein test&quot; &quot;(is true)&quot; &quot;(-main \&quot;euclidean\&quot; \&quot;files/irises.txt\&quot;)&quot; &quot;#'lab/calculate-point-potential&quot; &quot;(#'lab/calculate-point-potential)&quot; &quot;))&quot; &quot;(deftest calculate-points-potentials-test\n         (testing \&quot;correct potintial calculation\&quot;\n                  (testing \&quot;function 'calculate-point-potential'\&quot;\n                           (let [get-distance #'lab/get-hamming-distance\n                                 p {:index 1, :value [3.0 4.0]}\n                                 points [{:index 0, :value [1.0 5.0]} p]]\n                             (is (= (-&gt; (#'lab/calculate-point-potential get-distance points p) :potential)\n                                    1.4111122905071873))))\n                  ))&quot; &quot;\n         (testing \&quot;correct potintial calculation\&quot;\n                  (testing \&quot;function 'calculate-point-potential'\&quot;\n                           (let [get-distance #'lab/get-hamming-distance\n                                 p {:index 1, :value [3.0 4.0]}\n                                 points [{:index 0, :value [1.0 5.0]} p]]\n                             (is (= (-&gt; (#'lab/calculate-point-potential get-distance points p) :potential)\n                                    1.4111122905071873))))\n                  )&quot; &quot;(let [get-distance #'lab/get-hamming-distance\n      p {:index 1, :value [3.0 4.0]}\n      points [{:index 0, :value [1.0 5.0]} p]]\n  (is (= (-&gt; (#'lab/calculate-point-potential get-distance points p) :potential)\n         1.4111122905071873)))&quot; &quot;(let [get-distance get-hamming-distance\n      p {:index 1, :value [3.0 4.0]}\n      points [{:index 0, :value [1.0 5.0]} p]]\n  (is (= (-&gt; (calculate-point-potential get-distance points p) :potential)\n         1.4111122905071873)))&quot; &quot;get-hamming-distance&quot; &quot;(get-hamming-distance [1.1] [2.2])&quot;], :remote []}}</component>
</project>